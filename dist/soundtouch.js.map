{"version":3,"file":"soundtouch.js","sources":["../src/FifoSampleBuffer.js","../src/AbstractFifoSamplePipe.js","../src/RateTransposer.js","../src/FilterSupport.js","../src/noop.js","../src/SimpleFilter.js","../src/Stretch.js","../src/testFloatEqual.js","../src/SoundTouch.js","../src/WebAudioBufferSource.js","../src/getWebAudioNode.js","../src/minsSecs.js","../src/PitchShifter.js"],"sourcesContent":["/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FifoSampleBuffer {\n  constructor() {\n    this._vector = new Float32Array();\n    this._position = 0;\n    this._frameCount = 0;\n  }\n\n  get vector() {\n    return this._vector;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get startIndex() {\n    return this._position * 2;\n  }\n\n  get frameCount() {\n    return this._frameCount;\n  }\n\n  get endIndex() {\n    return (this._position + this._frameCount) * 2;\n  }\n\n  clear() {\n    this.receive(this._frameCount);\n    this.rewind();\n  }\n\n  put(numFrames) {\n    this._frameCount += numFrames;\n  }\n\n  putSamples(samples, position, numFrames = 0) {\n    position = position || 0;\n    const sourceOffset = position * 2;\n    if (!(numFrames >= 0)) {\n      numFrames = (samples.length - sourceOffset) / 2;\n    }\n    const numSamples = numFrames * 2;\n\n    this.ensureCapacity(numFrames + this._frameCount);\n\n    const destOffset = this.endIndex;\n    this.vector.set(\n      samples.subarray(sourceOffset, sourceOffset + numSamples),\n      destOffset\n    );\n\n    this._frameCount += numFrames;\n  }\n\n  putBuffer(buffer, position, numFrames = 0) {\n    position = position || 0;\n    if (!(numFrames >= 0)) {\n      numFrames = buffer.frameCount - position;\n    }\n    this.putSamples(buffer.vector, buffer.position + position, numFrames);\n  }\n\n  receive(numFrames) {\n    if (!(numFrames >= 0) || numFrames > this._frameCount) {\n      numFrames = this.frameCount;\n    }\n    this._frameCount -= numFrames;\n    this._position += numFrames;\n  }\n\n  receiveSamples(output, numFrames = 0) {\n    const numSamples = numFrames * 2;\n    const sourceOffset = this.startIndex;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n    this.receive(numFrames);\n  }\n\n  extract(output, position = 0, numFrames = 0) {\n    const sourceOffset = this.startIndex + position * 2;\n    const numSamples = numFrames * 2;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n  }\n\n  ensureCapacity(numFrames = 0) {\n    const minLength = parseInt(numFrames * 2);\n    if (this._vector.length < minLength) {\n      const newVector = new Float32Array(minLength);\n      newVector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._vector = newVector;\n      this._position = 0;\n    } else {\n      this.rewind();\n    }\n  }\n\n  ensureAdditionalCapacity(numFrames = 0) {\n    this.ensureCapacity(this._frameCount + numFrames);\n  }\n\n  rewind() {\n    if (this._position > 0) {\n      this._vector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._position = 0;\n    }\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport FifoSampleBuffer from './FifoSampleBuffer';\n\nexport default class AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    if (createBuffers) {\n      this._inputBuffer = new FifoSampleBuffer();\n      this._outputBuffer = new FifoSampleBuffer();\n    } else {\n      this._inputBuffer = this._outputBuffer = null;\n    }\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  set inputBuffer(inputBuffer) {\n    this._inputBuffer = inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  set outputBuffer(outputBuffer) {\n    this._outputBuffer = outputBuffer;\n  }\n\n  clear() {\n    this._inputBuffer.clear();\n    this._outputBuffer.clear();\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\nexport default class RateTransposer extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this.reset();\n    this._rate = 1;\n  }\n\n  set rate(rate) {\n    this._rate = rate;\n    // TODO: aa filter\n  }\n\n  reset() {\n    this.slopeCount = 0;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n  }\n\n  clone() {\n    const result = new RateTransposer();\n    result.rate = this._rate;\n    return result;\n  }\n\n  process() {\n    // TODO: aa filter\n    const numFrames = this._inputBuffer.frameCount;\n    this._outputBuffer.ensureAdditionalCapacity(numFrames / this._rate + 1);\n    const numFramesOutput = this.transpose(numFrames);\n    this._inputBuffer.receive();\n    this._outputBuffer.put(numFramesOutput);\n  }\n\n  transpose(numFrames = 0) {\n    if (numFrames === 0) {\n      return 0;\n    }\n\n    const src = this._inputBuffer.vector;\n    const srcOffset = this._inputBuffer.startIndex;\n\n    const dest = this._outputBuffer.vector;\n    const destOffset = this._outputBuffer.endIndex;\n\n    let used = 0;\n    let i = 0;\n\n    while (this.slopeCount < 1.0) {\n      dest[destOffset + 2 * i] =\n        (1.0 - this.slopeCount) * this.prevSampleL +\n        this.slopeCount * src[srcOffset];\n      dest[destOffset + 2 * i + 1] =\n        (1.0 - this.slopeCount) * this.prevSampleR +\n        this.slopeCount * src[srcOffset + 1];\n      i = i + 1;\n      this.slopeCount += this._rate;\n    }\n\n    this.slopeCount -= 1.0;\n\n    if (numFrames !== 1) {\n      // eslint-disable-next-line no-constant-condition\n      out: while (true) {\n        while (this.slopeCount > 1.0) {\n          this.slopeCount -= 1.0;\n          used = used + 1;\n          if (used >= numFrames - 1) {\n            break out;\n          }\n        }\n\n        const srcIndex = srcOffset + 2 * used;\n        dest[destOffset + 2 * i] =\n          (1.0 - this.slopeCount) * src[srcIndex] +\n          this.slopeCount * src[srcIndex + 2];\n        dest[destOffset + 2 * i + 1] =\n          (1.0 - this.slopeCount) * src[srcIndex + 1] +\n          this.slopeCount * src[srcIndex + 3];\n\n        i = i + 1;\n        this.slopeCount += this._rate;\n      }\n    }\n\n    this.prevSampleL = src[srcOffset + 2 * numFrames - 2];\n    this.prevSampleR = src[srcOffset + 2 * numFrames - 1];\n\n    return i;\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FilterSupport {\n  constructor(pipe) {\n    this._pipe = pipe;\n  }\n\n  get pipe() {\n    return this._pipe;\n  }\n\n  get inputBuffer() {\n    return this._pipe.inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._pipe.outputBuffer;\n  }\n\n  fillInputBuffer(/*numFrames*/) {\n    throw new Error('fillInputBuffer() not overridden');\n  }\n\n  fillOutputBuffer(numFrames = 0) {\n    while (this.outputBuffer.frameCount < numFrames) {\n      // TODO hardcoded buffer size\n      const numInputFrames = 8192 * 2 - this.inputBuffer.frameCount;\n\n      this.fillInputBuffer(numInputFrames);\n\n      if (this.inputBuffer.frameCount < 8192 * 2) {\n        break;\n        // TODO: flush pipe\n      }\n      this._pipe.process();\n    }\n  }\n\n  clear() {\n    this._pipe.clear();\n  }\n}\n","const noop = function() {\n  return;\n};\n\nexport default noop;\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport FilterSupport from './FilterSupport';\nimport noop from './noop';\n\nexport default class SimpleFilter extends FilterSupport {\n  constructor(sourceSound, pipe, callback = noop) {\n    super(pipe);\n    this.callback = callback;\n    this.sourceSound = sourceSound;\n    //this.bufferDuration = sourceSound.buffer.duration;\n    this.historyBufferSize = 22050;\n    this._sourcePosition = 0;\n    this.outputBufferPosition = 0;\n    this._position = 0;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(position) {\n    if (position > this._position) {\n      throw new RangeError(\n        'New position may not be greater than current position'\n      );\n    }\n    const newOutputBufferPosition =\n      this.outputBufferPosition - (this._position - position);\n    if (newOutputBufferPosition < 0) {\n      throw new RangeError('New position falls outside of history buffer');\n    }\n    this.outputBufferPosition = newOutputBufferPosition;\n    this._position = position;\n  }\n\n  get sourcePosition() {\n    return this._sourcePosition;\n  }\n\n  set sourcePosition(sourcePosition) {\n    this.clear();\n    this._sourcePosition = sourcePosition;\n  }\n\n  onEnd() {\n    this.callback();\n  }\n\n  fillInputBuffer(numFrames = 0) {\n    const samples = new Float32Array(numFrames * 2);\n    const numFramesExtracted = this.sourceSound.extract(\n      samples,\n      numFrames,\n      this._sourcePosition\n    );\n    this._sourcePosition += numFramesExtracted;\n    this.inputBuffer.putSamples(samples, 0, numFramesExtracted);\n  }\n\n  extract(target, numFrames = 0) {\n    this.fillOutputBuffer(this.outputBufferPosition + numFrames);\n\n    const numFramesExtracted = Math.min(\n      numFrames,\n      this.outputBuffer.frameCount - this.outputBufferPosition\n    );\n    this.outputBuffer.extract(\n      target,\n      this.outputBufferPosition,\n      numFramesExtracted\n    );\n\n    const currentFrames = this.outputBufferPosition + numFramesExtracted;\n    this.outputBufferPosition = Math.min(this.historyBufferSize, currentFrames);\n    this.outputBuffer.receive(\n      Math.max(currentFrames - this.historyBufferSize, 0)\n    );\n\n    this._position += numFramesExtracted;\n    return numFramesExtracted;\n  }\n\n  handleSampleData(event) {\n    this.extract(event.data, 4096);\n  }\n\n  clear() {\n    super.clear();\n    this.outputBufferPosition = 0;\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\n/**\n * Giving this value for the sequence length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEQUENCE_LEN = 0;\n\n/**\n * Default length of a single processing sequence, in milliseconds. This determines to how\n * long sequences the original sound is chopped in the time-stretch algorithm.\n *\n * The larger this value is, the lesser sequences are used in processing. In principle\n * a bigger value sounds better when slowing down tempo, but worse when increasing tempo\n * and vice versa.\n *\n * Increasing this value reduces computational burden and vice versa.\n */\n//const DEFAULT_SEQUENCE_MS = 130\nconst DEFAULT_SEQUENCE_MS = USE_AUTO_SEQUENCE_LEN;\n\n/**\n * Giving this value for the seek window length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEEKWINDOW_LEN = 0;\n\n/**\n * Seeking window default length in milliseconds for algorithm that finds the best possible\n * overlapping location. This determines from how wide window the algorithm may look for an\n * optimal joining location when mixing the sound sequences back together.\n *\n * The bigger this window setting is, the higher the possibility to find a better mixing\n * position will become, but at the same time large values may cause a \"drifting\" artifact\n * because consequent sequences will be taken at more uneven intervals.\n *\n * If there's a disturbing artifact that sounds as if a constant frequency was drifting\n * around, try reducing this setting.\n *\n * Increasing this value increases computational burden and vice versa.\n */\n//const DEFAULT_SEEKWINDOW_MS = 25;\nconst DEFAULT_SEEKWINDOW_MS = USE_AUTO_SEEKWINDOW_LEN;\n\n/**\n * Overlap length in milliseconds. When the chopped sound sequences are mixed back together,\n * to form a continuous sound stream, this parameter defines over how long period the two\n * consecutive sequences are let to overlap each other.\n *\n * This shouldn't be that critical parameter. If you reduce the DEFAULT_SEQUENCE_MS setting\n * by a large amount, you might wish to try a smaller value on this.\n *\n * Increasing this value increases computational burden and vice versa.\n */\nconst DEFAULT_OVERLAP_MS = 8;\n\n// Table for the hierarchical mixing position seeking algorithm\nconst _SCAN_OFFSETS = [\n  [\n    124,\n    186,\n    248,\n    310,\n    372,\n    434,\n    496,\n    558,\n    620,\n    682,\n    744,\n    806,\n    868,\n    930,\n    992,\n    1054,\n    1116,\n    1178,\n    1240,\n    1302,\n    1364,\n    1426,\n    1488,\n    0\n  ],\n  [\n    -100,\n    -75,\n    -50,\n    -25,\n    25,\n    50,\n    75,\n    100,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  ],\n  [\n    -20,\n    -15,\n    -10,\n    -5,\n    5,\n    10,\n    15,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n  ],\n  [-4, -3, -2, -1, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n];\n\n// Adjust tempo param according to tempo, so that variating processing sequence length is used\n// at varius tempo settings, between the given low...top limits\nconst AUTOSEQ_TEMPO_LOW = 0.5; // auto setting low tempo range (-50%)\nconst AUTOSEQ_TEMPO_TOP = 2.0; // auto setting top tempo range (+100%)\n\n// sequence-ms setting values at above low & top tempo\nconst AUTOSEQ_AT_MIN = 125.0;\nconst AUTOSEQ_AT_MAX = 50.0;\nconst AUTOSEQ_K =\n  (AUTOSEQ_AT_MAX - AUTOSEQ_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEQ_C = AUTOSEQ_AT_MIN - AUTOSEQ_K * AUTOSEQ_TEMPO_LOW;\n\n// seek-window-ms setting values at above low & top tempo\nconst AUTOSEEK_AT_MIN = 25.0;\nconst AUTOSEEK_AT_MAX = 15.0;\nconst AUTOSEEK_K =\n  (AUTOSEEK_AT_MAX - AUTOSEEK_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEEK_C = AUTOSEEK_AT_MIN - AUTOSEEK_K * AUTOSEQ_TEMPO_LOW;\n\nexport default class Stretch extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this._quickSeek = true;\n    this.midBufferDirty = false;\n\n    this.midBuffer = null;\n    this.overlapLength = 0;\n\n    this.autoSeqSetting = true;\n    this.autoSeekSetting = true;\n\n    this._tempo = 1;\n    this.setParameters(\n      44100,\n      DEFAULT_SEQUENCE_MS,\n      DEFAULT_SEEKWINDOW_MS,\n      DEFAULT_OVERLAP_MS\n    );\n  }\n\n  clear() {\n    super.clear();\n    this.clearMidBuffer();\n  }\n\n  clearMidBuffer() {\n    if (this.midBufferDirty) {\n      this.midBufferDirty = false;\n      this.midBuffer = null;\n    }\n  }\n\n  /**\n   * Sets routine control parameters. These control are certain time constants\n   * defining how the sound is stretched to the desired duration.\n   *\n   * 'sampleRate' = sample rate of the sound\n   * 'sequenceMS' = one processing sequence length in milliseconds (default = 82 ms)\n   * 'seekwindowMS' = seeking window length for scanning the best overlapping\n   *      position (default = 28 ms)\n   * 'overlapMS' = overlapping length (default = 12 ms)\n   */\n  setParameters(sampleRate, sequenceMs, seekWindowMs, overlapMs) {\n    // accept only positive parameter values - if zero or negative, use old values instead\n    if (sampleRate > 0) {\n      this.sampleRate = sampleRate;\n    }\n\n    if (overlapMs > 0) {\n      this.overlapMs = overlapMs;\n    }\n\n    if (sequenceMs > 0) {\n      this.sequenceMs = sequenceMs;\n      this.autoSeqSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeqSetting = true;\n    }\n\n    if (seekWindowMs > 0) {\n      this.seekWindowMs = seekWindowMs;\n      this.autoSeekSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeekSetting = true;\n    }\n\n    this.calculateSequenceParameters();\n\n    this.calculateOverlapLength(this.overlapMs);\n\n    // set tempo to recalculate 'sampleReq'\n    this.tempo = this._tempo;\n  }\n\n  /**\n   * Sets new target tempo. Normal tempo = 'SCALE', smaller values represent slower\n   * tempo, larger faster tempo.\n   */\n  set tempo(newTempo) {\n    let intskip;\n\n    this._tempo = newTempo;\n\n    // Calculate new sequence duration\n    this.calculateSequenceParameters();\n\n    // Calculate ideal skip length (according to tempo value)\n    this.nominalSkip =\n      this._tempo * (this.seekWindowLength - this.overlapLength);\n    this.skipFract = 0;\n    intskip = Math.floor(this.nominalSkip + 0.5);\n\n    // Calculate how many samples are needed in the 'inputBuffer' to process another batch of samples\n    this.sampleReq =\n      Math.max(intskip + this.overlapLength, this.seekWindowLength) +\n      this.seekLength;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  get inputChunkSize() {\n    return this.sampleReq;\n  }\n\n  get outputChunkSize() {\n    return (\n      this.overlapLength +\n      Math.max(0, this.seekWindowLength - 2 * this.overlapLength)\n    );\n  }\n\n  /**\n   * Calculates overlapInMsec period length in samples.\n   */\n  calculateOverlapLength(overlapInMsec = 0) {\n    let newOvl;\n\n    // TODO assert(overlapInMsec >= 0);\n    newOvl = (this.sampleRate * overlapInMsec) / 1000;\n    newOvl = newOvl < 16 ? 16 : newOvl;\n\n    // must be divisible by 8\n    newOvl -= newOvl % 8;\n\n    this.overlapLength = newOvl;\n\n    this.refMidBuffer = new Float32Array(this.overlapLength * 2);\n    this.midBuffer = new Float32Array(this.overlapLength * 2);\n  }\n\n  checkLimits(x, mi, ma) {\n    return x < mi ? mi : x > ma ? ma : x;\n  }\n\n  /**\n   * Calculates processing sequence length according to tempo setting\n   */\n  calculateSequenceParameters() {\n    let seq;\n    let seek;\n\n    if (this.autoSeqSetting) {\n      seq = AUTOSEQ_C + AUTOSEQ_K * this._tempo;\n      seq = this.checkLimits(seq, AUTOSEQ_AT_MAX, AUTOSEQ_AT_MIN);\n      this.sequenceMs = Math.floor(seq + 0.5);\n    }\n\n    if (this.autoSeekSetting) {\n      seek = AUTOSEEK_C + AUTOSEEK_K * this._tempo;\n      seek = this.checkLimits(seek, AUTOSEEK_AT_MAX, AUTOSEEK_AT_MIN);\n      this.seekWindowMs = Math.floor(seek + 0.5);\n    }\n\n    // Update seek window lengths\n    this.seekWindowLength = Math.floor(\n      (this.sampleRate * this.sequenceMs) / 1000\n    );\n    this.seekLength = Math.floor((this.sampleRate * this.seekWindowMs) / 1000);\n  }\n\n  /**\n   * Enables/disables the quick position seeking algorithm.\n   */\n  set quickSeek(enable) {\n    this._quickSeek = enable;\n  }\n\n  clone() {\n    const result = new Stretch();\n    result.tempo = this._tempo;\n    result.setParameters(\n      this.sampleRate,\n      this.sequenceMs,\n      this.seekWindowMs,\n      this.overlapMs\n    );\n    return result;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position.\n   */\n  seekBestOverlapPosition() {\n    return this._quickSeek\n      ? this.seekBestOverlapPositionStereoQuick()\n      : this.seekBestOverlapPositionStereo();\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereo() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let i = 0;\n\n    // Slopes the amplitudes of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestOffset = 0;\n    bestCorrelation = Number.MIN_VALUE;\n\n    // Scans for the best correlation value by testing each possible position over the permitted range\n    for (; i < this.seekLength; i = i + 1) {\n      // Calculates correlation value for the mixing position corresponding to 'i'\n      correlation = this.calculateCrossCorrelationStereo(\n        2 * i,\n        this.refMidBuffer\n      );\n\n      // Checks for the highest correlation value\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestOffset = i;\n      }\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereoQuick() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let scanCount = 0;\n    let correlationOffset;\n    let tempOffset;\n\n    // Slopes the amplitude of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestCorrelation = Number.MIN_VALUE;\n    bestOffset = 0;\n    correlationOffset = 0;\n    tempOffset = 0;\n\n    // Scans for the best correlation value using four-pass hierarchical search.\n    //\n    // The look-up table 'scans' has hierarchical position adjusting steps.\n    // In first pass the routine searhes for the highest correlation with\n    // relatively coarse steps, then rescans the neighbourhood of the highest\n    // correlation with better resolution and so on.\n    for (; scanCount < 4; scanCount = scanCount + 1) {\n      let j = 0;\n      while (_SCAN_OFFSETS[scanCount][j]) {\n        tempOffset = correlationOffset + _SCAN_OFFSETS[scanCount][j];\n        if (tempOffset >= this.seekLength) {\n          break;\n        }\n\n        // Calculates correlation value for the mixing position corresponding to 'tempOffset'\n        correlation = this.calculateCrossCorrelationStereo(\n          2 * tempOffset,\n          this.refMidBuffer\n        );\n\n        // Checks for the highest correlation value\n        if (correlation > bestCorrelation) {\n          bestCorrelation = correlation;\n          bestOffset = tempOffset;\n        }\n        j = j + 1;\n      }\n      correlationOffset = bestOffset;\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Slopes the amplitude of the 'midBuffer' samples so that cross correlation\n   * is faster to calculate\n   */\n  preCalculateCorrelationReferenceStereo() {\n    let i = 0;\n    let context;\n    let temp;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      temp = i * (this.overlapLength - i);\n      context = i * 2;\n      this.refMidBuffer[context] = this.midBuffer[context] * temp;\n      this.refMidBuffer[context + 1] = this.midBuffer[context + 1] * temp;\n    }\n  }\n\n  calculateCrossCorrelationStereo(mixingPosition, compare) {\n    const mixing = this._inputBuffer.vector;\n    mixingPosition += this._inputBuffer.startIndex;\n\n    let correlation = 0;\n    let i = 2;\n    const calcLength = 2 * this.overlapLength;\n    let mixingOffset;\n\n    for (; i < calcLength; i = i + 2) {\n      mixingOffset = i + mixingPosition;\n      correlation +=\n        mixing[mixingOffset] * compare[i] +\n        mixing[mixingOffset + 1] * compare[i + 1];\n    }\n\n    return correlation;\n  }\n\n  // TODO inline\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInputBuffer' at position\n   * of 'ovlPos'.\n   */\n  overlap(overlapPosition) {\n    this.overlapStereo(2 * overlapPosition);\n  }\n\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInput'\n   */\n  overlapStereo(inputPosition) {\n    const input = this._inputBuffer.vector;\n    inputPosition += this._inputBuffer.startIndex;\n\n    const output = this._outputBuffer.vector;\n    const outputPosition = this._outputBuffer.endIndex;\n\n    let i = 0;\n    let context;\n    let tempFrame;\n    const frameScale = 1 / this.overlapLength;\n    let fi;\n    let inputOffset;\n    let outputOffset;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      tempFrame = (this.overlapLength - i) * frameScale;\n      fi = i * frameScale;\n      context = 2 * i;\n      inputOffset = context + inputPosition;\n      outputOffset = context + outputPosition;\n      output[outputOffset + 0] =\n        input[inputOffset + 0] * fi + this.midBuffer[context + 0] * tempFrame;\n      output[outputOffset + 1] =\n        input[inputOffset + 1] * fi + this.midBuffer[context + 1] * tempFrame;\n    }\n  }\n\n  process() {\n    let offset;\n    let temp;\n    let overlapSkip;\n\n    if (this.midBuffer === null) {\n      // if midBuffer is empty, move the first samples of the input stream into it\n      if (this._inputBuffer.frameCount < this.overlapLength) {\n        // wait until we've got the overlapLength samples\n        return;\n      }\n      this.midBuffer = new Float32Array(this.overlapLength * 2);\n      this._inputBuffer.receiveSamples(this.midBuffer, this.overlapLength);\n    }\n\n    // Process samples as long as there are enough samples in 'inputBuffer' to form a processing frame\n    while (this._inputBuffer.frameCount >= this.sampleReq) {\n      // If tempo differs from the normal ('SCALE'), scan for hte best overlapping position\n      offset = this.seekBestOverlapPosition();\n\n      /**\n       * Mix the samples in the 'inputBuffer' at position of 'offset' with the samples in 'midBuffer'\n       * using sliding overlapping\n       * ... first partially overlap with the end of the previous sequence (that's in 'midBuffer')\n       */\n      this._outputBuffer.ensureAdditionalCapacity(this.overlapLength);\n      // FIXME unit?\n      // overlap(uint(offset));\n      this.overlap(Math.floor(offset));\n      this._outputBuffer.put(this.overlapLength);\n\n      // ... then copy sequence samples from 'inputBuffer' to output\n      temp = this.seekWindowLength - 2 * this.overlapLength; // & 0xfffffffe;\n      if (temp > 0) {\n        this._outputBuffer.putBuffer(\n          this._inputBuffer,\n          offset + this.overlapLength,\n          temp\n        );\n      }\n\n      /**\n       * Copies the end of the current sequence from 'inputBuffer' to 'midBuffer' for being mixed with\n       * the beginning of the next processing sequence and so on\n       */\n      // assert(offset + seekWindowLength <= (int)inputBuffer.numSamples());\n      const start =\n        this._inputBuffer.startIndex +\n        2 * (offset + this.seekWindowLength - this.overlapLength);\n      this.midBuffer.set(\n        this._inputBuffer.vector.subarray(start, start + 2 * this.overlapLength)\n      );\n\n      /**\n       * Remove the processed samples from the input buffer. Update the difference between\n       * integer & nominal skip step to 'skipFract' in order to prevent the error from\n       * accumulating over time\n       */\n      this.skipFract += this.nominalSkip; // real skip size\n      overlapSkip = Math.floor(this.skipFract);\n      this.skipFract -= overlapSkip;\n      this._inputBuffer.receive(overlapSkip);\n    }\n  }\n}\n","const testFloatEqual = function(a, b) {\n  return (a > b ? a - b : b - a) > 1e-10;\n};\n\nexport default testFloatEqual;\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport RateTransposer from './RateTransposer';\nimport Stretch from './Stretch';\nimport FifoSampleBuffer from './FifoSampleBuffer';\nimport testFloatEqual from './testFloatEqual';\n\nexport default class SoundTouch {\n  constructor() {\n    this.transposer = new RateTransposer(false);\n    this.stretch = new Stretch(false);\n\n    this._inputBuffer = new FifoSampleBuffer();\n    this._intermediateBuffer = new FifoSampleBuffer();\n    this._outputBuffer = new FifoSampleBuffer();\n\n    this._rate = 0;\n    this._tempo = 0;\n\n    this.virtualPitch = 1.0;\n    this.virtualRate = 1.0;\n    this.virtualTempo = 1.0;\n\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  clear() {\n    this.transposer.clear();\n    this.stretch.clear();\n  }\n\n  clone() {\n    const result = new SoundTouch();\n    result.rate = this.rate;\n    result.tempo = this.tempo;\n    return result;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(rate) {\n    this.virtualRate = rate;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set rateChange(rateChange) {\n    this._rate = 1.0 + 0.01 * rateChange;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  set tempo(tempo) {\n    this.virtualTempo = tempo;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set tempoChange(tempoChange) {\n    this.tempo = 1.0 + 0.01 * tempoChange;\n  }\n\n  set pitch(pitch) {\n    this.virtualPitch = pitch;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchOctaves(pitchOctaves) {\n    this.pitch = Math.exp(0.69314718056 * pitchOctaves);\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchSemitones(pitchSemitones) {\n    this.pitchOctaves = pitchSemitones / 12.0;\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  calculateEffectiveRateAndTempo() {\n    const previousTempo = this._tempo;\n    const previousRate = this._rate;\n\n    this._tempo = this.virtualTempo / this.virtualPitch;\n    this._rate = this.virtualRate * this.virtualPitch;\n\n    if (testFloatEqual(this._tempo, previousTempo)) {\n      this.stretch.tempo = this._tempo;\n    }\n    if (testFloatEqual(this._rate, previousRate)) {\n      this.transposer.rate = this._rate;\n    }\n\n    if (this._rate > 1.0) {\n      if (this._outputBuffer != this.transposer.outputBuffer) {\n        this.stretch.inputBuffer = this._inputBuffer;\n        this.stretch.outputBuffer = this._intermediateBuffer;\n\n        this.transposer.inputBuffer = this._intermediateBuffer;\n        this.transposer.outputBuffer = this._outputBuffer;\n      }\n    } else {\n      if (this._outputBuffer != this.stretch.outputBuffer) {\n        this.transposer.inputBuffer = this._inputBuffer;\n        this.transposer.outputBuffer = this._intermediateBuffer;\n\n        this.stretch.inputBuffer = this._intermediateBuffer;\n        this.stretch.outputBuffer = this._outputBuffer;\n      }\n    }\n  }\n\n  process() {\n    if (this._rate > 1.0) {\n      this.stretch.process();\n      this.transposer.process();\n    } else {\n      this.transposer.process();\n      this.stretch.process();\n    }\n  }\n}\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class WebAudioBufferSource {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this._position = 0;\n  }\n\n  get dualChannel() {\n    return this.buffer.numberOfChannels > 1;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    this._position = value;\n  }\n\n  extract(target, numFrames = 0, position = 0) {\n    this.position = position;\n    let left = this.buffer.getChannelData(0);\n    let right = this.dualChannel\n      ? this.buffer.getChannelData(1)\n      : this.buffer.getChannelData(0);\n    let i = 0;\n    for (; i < numFrames; i++) {\n      target[i * 2] = left[i + position];\n      target[i * 2 + 1] = right[i + position];\n    }\n    return Math.min(numFrames, left.length - position);\n  }\n}\n","import noop from './noop';\n/**\n * getWebAudioNode\n *\n * A wrapper to create an AudioNode and apply a filter for frame extraction\n * Copyright (c) Adrian Holovary https://github.com/adrianholovaty\n *\n * @param context - AudioContext\n * @param filter - Object containing an 'extract()' method\n * @param bufferSize - units of sample frames (256, 512, 1024, 2048, 4096, 8192, 16384)\n * @returns {ScriptProcessorNode}\n */\nconst getWebAudioNode = function(\n  context,\n  filter,\n  sourcePositionCallback = noop,\n  bufferSize = 4096\n) {\n  const node = context.createScriptProcessor(bufferSize, 2, 2);\n  const samples = new Float32Array(bufferSize * 2);\n\n  node.onaudioprocess = event => {\n    let left = event.outputBuffer.getChannelData(0);\n    let right = event.outputBuffer.getChannelData(1);\n    let framesExtracted = filter.extract(samples, bufferSize);\n    sourcePositionCallback(filter.sourcePosition);\n    if (framesExtracted === 0) {\n      filter.onEnd();\n    }\n    let i = 0;\n    for (; i < framesExtracted; i++) {\n      left[i] = samples[i * 2];\n      right[i] = samples[i * 2 + 1];\n    }\n  };\n  return node;\n};\n\nexport default getWebAudioNode;\n","const pad = function(n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n};\n\nconst minsSecs = function(secs) {\n  const mins = Math.floor(secs / 60);\n  const seconds = secs - mins * 60;\n  return `${mins}:${pad(parseInt(seconds), 2)}`;\n};\n\nexport default minsSecs;\n","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport WebAudioBufferSource from './WebAudioBufferSource';\nimport getWebAudioNode from './getWebAudioNode';\nimport SoundTouch from './SoundTouch';\nimport SimpleFilter from './SimpleFilter';\nimport minsSecs from './minsSecs';\nimport noop from './noop';\n\nconst onUpdate = function(sourcePosition) {\n  const currentTimePlayed = this.timePlayed;\n  const sampleRate = this.sampleRate;\n  this.sourcePosition = sourcePosition;\n  this.timePlayed = sourcePosition / sampleRate;\n  if (currentTimePlayed !== this.timePlayed) {\n    const timePlayed = new CustomEvent('play', {\n      detail: {\n        timePlayed: this.timePlayed,\n        formattedTimePlayed: this.formattedTimePlayed,\n        percentagePlayed: this.percentagePlayed\n      }\n    });\n    this._node.dispatchEvent(timePlayed);\n  }\n};\n\nexport default class PitchShifter {\n  constructor(context, buffer, bufferSize, onEnd = noop) {\n    this._soundtouch = new SoundTouch();\n    const source = new WebAudioBufferSource(buffer);\n    this.timePlayed = 0;\n    this.sourcePosition = 0;\n    this._filter = new SimpleFilter(source, this._soundtouch, onEnd);\n    this._node = getWebAudioNode(context, this._filter, sourcePostion =>\n      onUpdate.call(this, sourcePostion)\n    );\n    this.tempo = 1;\n    this.rate = 1;\n    this.duration = buffer.duration;\n    this.sampleRate = context.sampleRate;\n    this.listeners = [];\n  }\n\n  get formattedDuration() {\n    return minsSecs(this.duration);\n  }\n\n  get formattedTimePlayed() {\n    return minsSecs(this.timePlayed);\n  }\n\n  get percentagePlayed() {\n    return (\n      (100 * this._filter.sourcePosition) / (this.duration * this.sampleRate)\n    );\n  }\n\n  set percentagePlayed(perc) {\n    this._filter.sourcePosition = parseInt(\n      perc * this.duration * this.sampleRate\n    );\n  }\n\n  get node() {\n    return this._node;\n  }\n\n  set pitch(pitch) {\n    this._soundtouch.pitch = pitch;\n  }\n\n  set pitchSemitones(semitone) {\n    this._soundtouch.pitchSemitones = semitone;\n  }\n\n  set rate(rate) {\n    this._soundtouch.rate = rate;\n  }\n\n  set tempo(tempo) {\n    this._soundtouch.tempo = tempo;\n  }\n\n  connect(toNode) {\n    this._node.connect(toNode);\n  }\n\n  disconnect() {\n    this._node.disconnect();\n  }\n\n  on(eventName, cb) {\n    this.listeners.push({ name: eventName, cb: cb });\n    this._node.addEventListener(eventName, event => cb(event.detail));\n  }\n\n  off(eventName = null) {\n    let listeners = this.listeners;\n    if (eventName) {\n      listeners = listeners.filter(e => e.name === eventName);\n    }\n    listeners.forEach(e => {\n      this._node.removeEventListener(e.name, event => e.cb(event.detail));\n    });\n  }\n}\n"],"names":["FifoSampleBuffer","_vector","Float32Array","_position","_frameCount","receive","rewind","numFrames","samples","position","sourceOffset","length","numSamples","ensureCapacity","destOffset","endIndex","vector","set","subarray","buffer","frameCount","putSamples","output","startIndex","minLength","parseInt","newVector","AbstractFifoSamplePipe","createBuffers","_inputBuffer","_outputBuffer","clear","inputBuffer","outputBuffer","RateTransposer","reset","_rate","slopeCount","prevSampleL","prevSampleR","result","rate","ensureAdditionalCapacity","numFramesOutput","transpose","put","src","srcOffset","dest","used","i","out","srcIndex","FilterSupport","pipe","_pipe","Error","numInputFrames","fillInputBuffer","process","noop","SimpleFilter","sourceSound","callback","historyBufferSize","_sourcePosition","outputBufferPosition","numFramesExtracted","extract","target","fillOutputBuffer","Math","min","currentFrames","max","event","data","RangeError","newOutputBufferPosition","sourcePosition","USE_AUTO_SEQUENCE_LEN","DEFAULT_SEQUENCE_MS","USE_AUTO_SEEKWINDOW_LEN","DEFAULT_SEEKWINDOW_MS","DEFAULT_OVERLAP_MS","_SCAN_OFFSETS","AUTOSEQ_TEMPO_LOW","AUTOSEQ_TEMPO_TOP","AUTOSEQ_AT_MIN","AUTOSEQ_AT_MAX","AUTOSEQ_K","AUTOSEQ_C","AUTOSEEK_AT_MIN","AUTOSEEK_AT_MAX","AUTOSEEK_K","AUTOSEEK_C","Stretch","_quickSeek","midBufferDirty","midBuffer","overlapLength","autoSeqSetting","autoSeekSetting","_tempo","setParameters","clearMidBuffer","sampleRate","sequenceMs","seekWindowMs","overlapMs","calculateSequenceParameters","calculateOverlapLength","tempo","overlapInMsec","newOvl","refMidBuffer","x","mi","ma","seq","seek","checkLimits","floor","seekWindowLength","seekLength","seekBestOverlapPositionStereoQuick","seekBestOverlapPositionStereo","bestOffset","bestCorrelation","correlation","preCalculateCorrelationReferenceStereo","Number","MIN_VALUE","calculateCrossCorrelationStereo","scanCount","correlationOffset","tempOffset","j","context","temp","mixingPosition","compare","mixing","calcLength","mixingOffset","overlapPosition","overlapStereo","inputPosition","input","outputPosition","tempFrame","frameScale","fi","inputOffset","outputOffset","offset","overlapSkip","receiveSamples","sampleReq","seekBestOverlapPosition","overlap","putBuffer","start","skipFract","nominalSkip","newTempo","intskip","enable","testFloatEqual","a","b","SoundTouch","transposer","stretch","_intermediateBuffer","virtualPitch","virtualRate","virtualTempo","calculateEffectiveRateAndTempo","previousTempo","previousRate","rateChange","tempoChange","pitch","pitchOctaves","exp","pitchSemitones","WebAudioBufferSource","left","getChannelData","right","dualChannel","numberOfChannels","value","getWebAudioNode","filter","sourcePositionCallback","bufferSize","node","createScriptProcessor","onaudioprocess","framesExtracted","onEnd","pad","n","width","z","Array","join","minsSecs","secs","mins","seconds","onUpdate","currentTimePlayed","timePlayed","CustomEvent","formattedTimePlayed","percentagePlayed","_node","dispatchEvent","PitchShifter","_soundtouch","source","_filter","call","sourcePostion","duration","listeners","toNode","connect","disconnect","eventName","cb","push","name","addEventListener","detail","e","forEach","removeEventListener","perc","semitone"],"mappings":"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"}