{"version":3,"file":"soundtouch.js","sources":["../src/FifoSampleBuffer.js","../src/AbstractFifoSamplePipe.js","../src/RateTransposer.js","../src/FilterSupport.js","../src/noop.js","../src/SimpleFilter.js","../src/Stretch.js","../src/testFloatEqual.js","../src/SoundTouch.js","../src/WebAudioBufferSource.js","../src/getWebAudioNode.js","../src/minsSecs.js","../src/PitchShifter.js"],"sourcesContent":["/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FifoSampleBuffer {\n    constructor() {\n        this._vector = new Float32Array();\n        this._position = 0;\n        this._frameCount = 0;\n    }\n\n    get vector() {\n        return this._vector;\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    get startIndex() {\n        return this._position * 2;\n    }\n\n    get frameCount() {\n        return this._frameCount;\n    }\n\n    get endIndex() {\n        return (this._position + this._frameCount) * 2;\n    }\n\n    clear() {\n        this.receive(this._frameCount);\n        this.rewind();\n    }\n\n    put(numFrames) {\n        this._frameCount +=  numFrames;\n    }\n\n    putSamples(samples, position, numFrames = 0) {\n        position = position || 0;\n        const sourceOffset = position * 2;\n        if (!(numFrames >= 0)) {\n            numFrames = (samples.length - sourceOffset) / 2;\n        }\n        const numSamples = numFrames * 2;\n\n        this.ensureCapacity(numFrames + this._frameCount);\n\n        const destOffset = this.endIndex;\n        this.vector.set(samples.subarray(sourceOffset, sourceOffset + numSamples), destOffset);\n\n        this._frameCount += numFrames;\n    }\n\n    putBuffer(buffer, position, numFrames = 0) {\n        position = position || 0;\n        if (!(numFrames >= 0)) {\n            numFrames = buffer.frameCount - position;\n        }\n        this.putSamples(buffer.vector, buffer.position + position, numFrames);\n    }\n\n    receive(numFrames) {\n        if (!(numFrames >= 0) || numFrames > this._frameCount) {\n            numFrames = this.frameCount;\n        }\n        this._frameCount -= numFrames;\n        this._position += numFrames;\n    }\n\n    receiveSamples(output, numFrames = 0) {\n        const numSamples = numFrames * 2;\n        const sourceOffset = this.startIndex;\n        output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n        this.receive(numFrames);\n    }\n\n    extract(output, position = 0, numFrames = 0) {\n        const sourceOffset = this.startIndex + position * 2;\n        const numSamples = numFrames * 2;\n        output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n    }\n\n    ensureCapacity(numFrames = 0) {\n        const minLength = parseInt(numFrames * 2);\n        if (this._vector.length < minLength) {\n            const newVector = new Float32Array(minLength);\n            newVector.set(this._vector.subarray(this.startIndex, this.endIndex));\n            this._vector = newVector;\n            this._position = 0;\n        } else {\n            this.rewind();\n        }\n    }\n\n    ensureAdditionalCapacity(numFrames = 0) {\n        this.ensureCapacity(this._frameCount + numFrames);\n    }\n\n    rewind() {\n        if (this._position > 0) {\n            this._vector.set(this._vector.subarray(this.startIndex, this.endIndex));\n            this._position = 0;\n        }\n    }\n}","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport FifoSampleBuffer from './FifoSampleBuffer';\n\nexport default class AbstractFifoSamplePipe {\n    constructor(createBuffers) {\n        if (createBuffers) {\n            this._inputBuffer = new FifoSampleBuffer();\n            this._outputBuffer = new FifoSampleBuffer();\n        } else {\n            this._inputBuffer = this._outputBuffer = null;\n        }\n    }\n\n    get inputBuffer() {\n        return this._inputBuffer;\n    }\n\n    set inputBuffer(inputBuffer) {\n        this._inputBuffer = inputBuffer;\n    }\n\n    get outputBuffer() {\n        return this._outputBuffer;\n    }\n\n    set outputBuffer(outputBuffer) {\n        this._outputBuffer = outputBuffer;\n    }\n\n    clear() {\n        this._inputBuffer.clear();\n        this._outputBuffer.clear();\n    }\n}","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\nexport default class RateTransposer extends AbstractFifoSamplePipe {\n    constructor(createBuffers) {\n        super(createBuffers);\n        this.reset();\n        this._rate = 1;\n    }\n\n    set rate(rate) {\n        this._rate = rate;\n        // TODO: aa filter\n    }\n\n    reset() {\n        this.slopeCount = 0;\n        this.prevSampleL = 0;\n        this.prevSampleR = 0;\n    }\n\n    clone() {\n        const result = new RateTransposer();\n        result.rate = this._rate;\n        return result;\n    }\n\n    process() {\n        // TODO: aa filter\n        const numFrames = this._inputBuffer.frameCount;\n        this._outputBuffer.ensureAdditionalCapacity(numFrames / this._rate + 1);\n        const numFramesOutput = this.transpose(numFrames);\n        this._inputBuffer.receive();\n        this._outputBuffer.put(numFramesOutput);\n    }\n\n    transpose(numFrames = 0) {\n        if (numFrames === 0) {\n            return 0;\n        }\n\n        const src = this._inputBuffer.vector;\n        const srcOffset = this._inputBuffer.startIndex;\n\n        const dest = this._outputBuffer.vector;\n        const destOffset = this._outputBuffer.endIndex;\n\n        let used = 0;\n        let i = 0;\n\n        while (this.slopeCount < 1.0) {\n            dest[destOffset + 2 * i] = (1.0 - this.slopeCount) * this.prevSampleL + this.slopeCount * src[srcOffset];\n            dest[destOffset + 2 * i + 1] =\n                (1.0 - this.slopeCount) * this.prevSampleR + this.slopeCount * src[srcOffset + 1];\n            i = i + 1;\n            this.slopeCount += this._rate;\n        }\n\n        this.slopeCount -= 1.0;\n\n        if (numFrames !== 1) {\n            out: while (true) { // eslint-disable-line no-constant-condition\n                while (this.slopeCount > 1.0) {\n                    this.slopeCount -= 1.0;\n                    used = used + 1;\n                    if (used >= numFrames - 1) {\n                        break out;\n                    }\n                }\n\n                const srcIndex = srcOffset + 2 * used;\n                dest[destOffset + 2 * i] =\n                    (1.0 - this.slopeCount) * src[srcIndex] + this.slopeCount * src[srcIndex + 2];\n                dest[destOffset + 2 * i + 1] =\n                    (1.0 - this.slopeCount) * src[srcIndex + 1] + this.slopeCount * src[srcIndex + 3];\n\n                i = i + 1;\n                this.slopeCount += this._rate;\n            }\n        }\n\n        this.prevSampleL = src[srcOffset + 2 * numFrames - 2];\n        this.prevSampleR = src[srcOffset + 2 * numFrames - 1];\n\n        return i;\n    }\n}","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class FilterSupport {\n    constructor(pipe) {\n        this._pipe = pipe;\n    }\n\n    get pipe() {\n        return this._pipe;\n    }\n\n    get inputBuffer() {\n        return this._pipe.inputBuffer;\n    }\n\n    get outputBuffer() {\n        return this._pipe.outputBuffer;\n    }\n\n    fillInputBuffer(/*numFrames*/) {\n        throw new Error('fillInputBuffer() not overridden');\n    }\n\n    fillOutputBuffer(numFrames = 0) {\n        while (this.outputBuffer.frameCount < numFrames) {\n            // TODO hardcoded buffer size\n            const numInputFrames = (8192 * 2) - this.inputBuffer.frameCount;\n\n            this.fillInputBuffer(numInputFrames);\n\n            if (this.inputBuffer.frameCount < (8192 * 2)) {\n                break;\n                // TODO: flush pipe\n            }\n            this._pipe.process();\n        }\n    }\n\n    clear() {\n        this._pipe.clear();\n    }\n}","const noop = function () {\n    return;\n};\n\nexport default noop;","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport FilterSupport from './FilterSupport';\nimport noop from './noop';\n\nexport default class SimpleFilter extends FilterSupport {\n    constructor(sourceSound, pipe, callback = noop) {\n        super(pipe);\n        this.callback = callback;\n        this.sourceSound = sourceSound;\n        //this.bufferDuration = sourceSound.buffer.duration;\n        this.historyBufferSize = 22050;\n        this._sourcePosition = 0;\n        this.outputBufferPosition = 0;\n        this._position = 0;\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    set position(position) {\n        if (position > this._position) {\n            throw new RangeError('New position may not be greater than current position');\n        }\n        const newOutputBufferPosition = this.outputBufferPosition - (this._position - position);\n        if (newOutputBufferPosition < 0) {\n            throw new RangeError('New position falls outside of history buffer');\n        }\n        this.outputBufferPosition = newOutputBufferPosition;\n        this._position = position;\n    }\n\n    get sourcePosition() {\n        return this._sourcePosition;\n    }\n\n    set sourcePosition(sourcePosition) {\n        this.clear();\n        this._sourcePosition = sourcePosition;\n    }\n\n    onEnd() {\n        this.callback();\n    }\n\n    fillInputBuffer(numFrames = 0) {\n        const samples = new Float32Array(numFrames * 2);\n        const numFramesExtracted = this.sourceSound.extract(samples, numFrames, this._sourcePosition);\n        this._sourcePosition += numFramesExtracted;\n        this.inputBuffer.putSamples(samples, 0, numFramesExtracted);\n    }\n\n    extract(target, numFrames = 0) {\n        this.fillOutputBuffer(this.outputBufferPosition + numFrames);\n\n        const numFramesExtracted = Math.min(numFrames, this.outputBuffer.frameCount - this.outputBufferPosition);\n        this.outputBuffer.extract(target, this.outputBufferPosition, numFramesExtracted);\n\n        const currentFrames = this.outputBufferPosition + numFramesExtracted;\n        this.outputBufferPosition = Math.min(this.historyBufferSize, currentFrames);\n        this.outputBuffer.receive(Math.max(currentFrames - this.historyBufferSize, 0));\n\n        this._position += numFramesExtracted;\n        return numFramesExtracted;\n    }\n\n    handleSampleData(event) {\n        this.extract(event.data, 4096);\n    }\n\n    clear() {\n        super.clear();\n        this.outputBufferPosition = 0;\n    }\n}","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\n/**\n * Giving this value for the sequence length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEQUENCE_LEN = 0;\n\n/**\n * Default length of a single processing sequence, in milliseconds. This determines to how\n * long sequences the original sound is chopped in the time-stretch algorithm.\n *\n * The larger this value is, the lesser sequences are used in processing. In principle\n * a bigger value sounds better when slowing down tempo, but worse when increasing tempo\n * and vice versa.\n *\n * Increasing this value reduces computational burden and vice versa.\n */\n//const DEFAULT_SEQUENCE_MS = 130\nconst DEFAULT_SEQUENCE_MS = USE_AUTO_SEQUENCE_LEN;\n\n/**\n * Giving this value for the seek window length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEEKWINDOW_LEN = 0;\n\n/**\n * Seeking window default length in milliseconds for algorithm that finds the best possible\n * overlapping location. This determines from how wide window the algorithm may look for an\n * optimal joining location when mixing the sound sequences back together.\n *\n * The bigger this window setting is, the higher the possibility to find a better mixing\n * position will become, but at the same time large values may cause a \"drifting\" artifact\n * because consequent sequences will be taken at more uneven intervals.\n *\n * If there's a disturbing artifact that sounds as if a constant frequency was drifting\n * around, try reducing this setting.\n *\n * Increasing this value increases computational burden and vice versa.\n */\n//const DEFAULT_SEEKWINDOW_MS = 25;\nconst DEFAULT_SEEKWINDOW_MS = USE_AUTO_SEEKWINDOW_LEN;\n\n/**\n * Overlap length in milliseconds. When the chopped sound sequences are mixed back together,\n * to form a continuous sound stream, this parameter defines over how long period the two\n * consecutive sequences are let to overlap each other.\n *\n * This shouldn't be that critical parameter. If you reduce the DEFAULT_SEQUENCE_MS setting\n * by a large amount, you might wish to try a smaller value on this.\n *\n * Increasing this value increases computational burden and vice versa.\n */\nconst DEFAULT_OVERLAP_MS = 8;\n\n// Table for the hierarchical mixing position seeking algorithm\nconst _SCAN_OFFSETS = [\n    [ 124,  186,  248,  310,  372,  434,  496,  558,  620,  682,  744, 806,\n        868,  930,  992, 1054, 1116, 1178, 1240, 1302, 1364, 1426, 1488,   0],\n    [-100,  -75,  -50,  -25,   25,   50,   75,  100,    0,    0,    0,   0,\n        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   0],\n    [ -20,  -15,  -10,   -5,    5,   10,   15,   20,    0,    0,    0,   0,\n        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   0],\n    [  -4,   -3,   -2,   -1,    1,    2,    3,    4,    0,    0,    0,   0,\n        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   0]];\n\n// Adjust tempo param according to tempo, so that variating processing sequence length is used\n// at varius tempo settings, between the given low...top limits\nconst AUTOSEQ_TEMPO_LOW = 0.5;     // auto setting low tempo range (-50%)\nconst AUTOSEQ_TEMPO_TOP = 2.0;     // auto setting top tempo range (+100%)\n\n// sequence-ms setting values at above low & top tempo\nconst AUTOSEQ_AT_MIN = 125.0;\nconst AUTOSEQ_AT_MAX = 50.0;\nconst AUTOSEQ_K = ((AUTOSEQ_AT_MAX - AUTOSEQ_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW));\nconst AUTOSEQ_C = (AUTOSEQ_AT_MIN - (AUTOSEQ_K) * (AUTOSEQ_TEMPO_LOW));\n\n// seek-window-ms setting values at above low & top tempo\nconst AUTOSEEK_AT_MIN = 25.0;\nconst AUTOSEEK_AT_MAX = 15.0;\nconst AUTOSEEK_K = ((AUTOSEEK_AT_MAX - AUTOSEEK_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW));\nconst AUTOSEEK_C = (AUTOSEEK_AT_MIN - (AUTOSEEK_K) * (AUTOSEQ_TEMPO_LOW));\n\nexport default class Stretch extends AbstractFifoSamplePipe {\n    constructor(createBuffers) {\n        super(createBuffers);\n        this._quickSeek = true;\n        this.midBufferDirty = false;\n\n        this.midBuffer = null;\n        this.overlapLength = 0;\n\n        this.autoSeqSetting = true;\n        this.autoSeekSetting = true;\n\n        this._tempo = 1;\n        this.setParameters(44100, DEFAULT_SEQUENCE_MS, DEFAULT_SEEKWINDOW_MS, DEFAULT_OVERLAP_MS);\n    }\n\n    clear() {\n        super.clear();\n        this.clearMidBuffer();\n    }\n\n    clearMidBuffer() {\n        if (this.midBufferDirty) {\n            this.midBufferDirty = false;\n            this.midBuffer = null;\n        }\n    }\n\n    /**\n     * Sets routine control parameters. These control are certain time constants\n     * defining how the sound is stretched to the desired duration.\n     *\n     * 'sampleRate' = sample rate of the sound\n     * 'sequenceMS' = one processing sequence length in milliseconds (default = 82 ms)\n     * 'seekwindowMS' = seeking window length for scanning the best overlapping\n     *      position (default = 28 ms)\n     * 'overlapMS' = overlapping length (default = 12 ms)\n     */\n    setParameters(sampleRate, sequenceMs, seekWindowMs, overlapMs) {\n        // accept only positive parameter values - if zero or negative, use old values instead\n        if (sampleRate > 0) {\n            this.sampleRate = sampleRate;\n        }\n\n        if (overlapMs > 0) {\n            this.overlapMs = overlapMs;\n        }\n\n        if (sequenceMs > 0) {\n            this.sequenceMs = sequenceMs;\n            this.autoSeqSetting = false;\n        } else {\n            // zero or below, use automatic setting\n            this.autoSeqSetting = true;\n        }\n\n        if (seekWindowMs > 0) {\n            this.seekWindowMs = seekWindowMs;\n            this.autoSeekSetting = false;\n        } else {\n            // zero or below, use automatic setting\n            this.autoSeekSetting = true;\n        }\n\n        this.calculateSequenceParameters();\n\n        this.calculateOverlapLength(this.overlapMs);\n\n        // set tempo to recalculate 'sampleReq'\n        this.tempo = this._tempo;\n    }\n\n    /**\n     * Sets new target tempo. Normal tempo = 'SCALE', smaller values represent slower\n     * tempo, larger faster tempo.\n     */\n    set tempo(newTempo) {\n        let intskip;\n\n        this._tempo = newTempo;\n\n        // Calculate new sequence duration\n        this.calculateSequenceParameters();\n\n        // Calculate ideal skip length (according to tempo value)\n        this.nominalSkip = this._tempo * (this.seekWindowLength - this.overlapLength);\n        this.skipFract = 0;\n        intskip = Math.floor(this.nominalSkip + 0.5);\n\n        // Calculate how many samples are needed in the 'inputBuffer' to process another batch of samples\n        this.sampleReq = Math.max(intskip + this.overlapLength, this.seekWindowLength) + this.seekLength;\n    }\n\n    get tempo() {\n        return this._tempo;\n    }\n\n    get inputChunkSize() {\n        return this.sampleReq;\n    }\n\n    get outputChunkSize() {\n        return this.overlapLength + Math.max(0, this.seekWindowLength - 2 * this.overlapLength);\n    }\n\n    /**\n     * Calculates overlapInMsec period length in samples.\n     */\n    calculateOverlapLength(overlapInMsec = 0) {\n        let newOvl;\n\n        // TODO assert(overlapInMsec >= 0);\n        newOvl = (this.sampleRate * overlapInMsec) / 1000;\n        newOvl = newOvl < 16 ? 16 : newOvl;\n\n        // must be divisible by 8\n        newOvl -= newOvl % 8;\n\n        this.overlapLength = newOvl;\n\n        this.refMidBuffer = new Float32Array(this.overlapLength * 2);\n        this.midBuffer = new Float32Array(this.overlapLength * 2);\n    }\n\n    checkLimits(x, mi, ma) {\n        return x < mi ? mi : (x > ma ? ma : x);\n    }\n\n    /**\n     * Calculates processing sequence length according to tempo setting\n     */\n    calculateSequenceParameters() {\n        let seq;\n        let seek;\n\n        if (this.autoSeqSetting) {\n            seq = AUTOSEQ_C + AUTOSEQ_K * this._tempo;\n            seq = this.checkLimits(seq, AUTOSEQ_AT_MAX, AUTOSEQ_AT_MIN);\n            this.sequenceMs = Math.floor(seq + 0.5);\n        }\n\n        if (this.autoSeekSetting) {\n            seek = AUTOSEEK_C + AUTOSEEK_K * this._tempo;\n            seek = this.checkLimits(seek, AUTOSEEK_AT_MAX, AUTOSEEK_AT_MIN);\n            this.seekWindowMs = Math.floor(seek + 0.5);\n        }\n\n        // Update seek window lengths\n        this.seekWindowLength = Math.floor((this.sampleRate * this.sequenceMs) / 1000);\n        this.seekLength = Math.floor((this.sampleRate * this.seekWindowMs) / 1000);\n    }\n\n    /**\n     * Enables/disables the quick position seeking algorithm.\n     */\n    set quickSeek(enable) {\n        this._quickSeek = enable;\n    }\n\n    clone() {\n        const result = new Stretch();\n        result.tempo = this._tempo;\n        result.setParameters(this.sampleRate, this.sequenceMs, this.seekWindowMs, this.overlapMs);\n        return result;\n    }\n\n    /**\n     * Seeks for the optimal overlap-mixing position.\n     */\n    seekBestOverlapPosition() {\n        return this._quickSeek ? this.seekBestOverlapPositionStereoQuick() : this.seekBestOverlapPositionStereo();\n    }\n\n    /**\n     * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n     * routine\n     *\n     * The best position is determined as the position where the two overlapped\n     * sample sequences are 'most alike', in terms of the highest cross-correlation\n     * value over the overlapping period\n     */\n    seekBestOverlapPositionStereo() {\n        let bestOffset;\n        let bestCorrelation;\n        let correlation;\n        let i = 0;\n\n        // Slopes the amplitudes of the 'midBuffer' samples\n        this.preCalculateCorrelationReferenceStereo();\n\n        bestOffset = 0;\n        bestCorrelation = Number.MIN_VALUE;\n\n        // Scans for the best correlation value by testing each possible position over the permitted range\n        for (; i < this.seekLength; i = i + 1) {\n            // Calculates correlation value for the mixing position corresponding to 'i'\n            correlation = this.calculateCrossCorrelationStereo(2 * i, this.refMidBuffer);\n\n            // Checks for the highest correlation value\n            if (correlation > bestCorrelation) {\n                bestCorrelation = correlation;\n                bestOffset = i;\n            }\n        }\n\n        return bestOffset;\n    }\n\n    /**\n     * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n     * routine\n     *\n     * The best position is determined as the position where the two overlapped\n     * sample sequences are 'most alike', in terms of the highest cross-correlation\n     * value over the overlapping period\n     */\n    seekBestOverlapPositionStereoQuick() {\n        let bestOffset;\n        let bestCorrelation;\n        let correlation;\n        let scanCount = 0;\n        let correlationOffset;\n        let tempOffset;\n\n        // Slopes the amplitude of the 'midBuffer' samples\n        this.preCalculateCorrelationReferenceStereo();\n\n        bestCorrelation = Number.MIN_VALUE;\n        bestOffset = 0;\n        correlationOffset = 0;\n        tempOffset = 0;\n\n        // Scans for the best correlation value using four-pass hierarchical search.\n        //\n        // The look-up table 'scans' has hierarchical position adjusting steps.\n        // In first pass the routine searhes for the highest correlation with\n        // relatively coarse steps, then rescans the neighbourhood of the highest\n        // correlation with better resolution and so on.\n        for (; scanCount < 4; scanCount = scanCount + 1) {\n            let j = 0;\n            while (_SCAN_OFFSETS[scanCount][j]) {\n                tempOffset = correlationOffset + _SCAN_OFFSETS[scanCount][j];\n                if (tempOffset >= this.seekLength) {\n                    break;\n                }\n\n                // Calculates correlation value for the mixing position corresponding to 'tempOffset'\n                correlation = this.calculateCrossCorrelationStereo(2 * tempOffset, this.refMidBuffer);\n\n                // Checks for the highest correlation value\n                if (correlation > bestCorrelation) {\n                    bestCorrelation = correlation;\n                    bestOffset = tempOffset;\n                }\n                j = j + 1;\n            }\n            correlationOffset = bestOffset;\n        }\n\n        return bestOffset;\n    }\n\n    /**\n     * Slopes the amplitude of the 'midBuffer' samples so that cross correlation\n     * is faster to calculate\n     */\n    preCalculateCorrelationReferenceStereo() {\n        let i = 0;\n        let context;\n        let temp;\n\n        for (; i < this.overlapLength; i = i + 1) {\n            temp = i * (this.overlapLength - i);\n            context = i * 2;\n            this.refMidBuffer[context] = this.midBuffer[context] * temp;\n            this.refMidBuffer[context + 1] = this.midBuffer[context + 1] * temp;\n        }\n    }\n\n    calculateCrossCorrelationStereo(mixingPosition, compare) {\n        const mixing = this._inputBuffer.vector;\n        mixingPosition += this._inputBuffer.startIndex;\n\n        let correlation = 0;\n        let i = 2;\n        const calcLength = 2 * this.overlapLength;\n        let mixingOffset;\n\n        for (; i < calcLength; i = i + 2) {\n            mixingOffset = i + mixingPosition;\n            correlation += mixing[mixingOffset] * compare[i] + mixing[mixingOffset + 1] * compare[i + 1];\n        }\n\n        return correlation;\n    }\n\n    // TODO inline\n    /**\n     * Overlaps samples in 'midBuffer' with the samples in 'pInputBuffer' at position\n     * of 'ovlPos'.\n     */\n    overlap(overlapPosition) {\n        this.overlapStereo(2 * overlapPosition);\n    }\n\n    /**\n     * Overlaps samples in 'midBuffer' with the samples in 'pInput'\n     */\n    overlapStereo(inputPosition) {\n        const input = this._inputBuffer.vector;\n        inputPosition += this._inputBuffer.startIndex;\n\n        const output = this._outputBuffer.vector;\n        const outputPosition = this._outputBuffer.endIndex;\n\n        let i = 0;\n        let context;\n        let tempFrame;\n        const frameScale = 1 / this.overlapLength;\n        let fi;\n        let inputOffset;\n        let outputOffset;\n\n        for (; i < this.overlapLength; i = i + 1) {\n            tempFrame = (this.overlapLength - i) * frameScale;\n            fi = i * frameScale;\n            context = 2 * i;\n            inputOffset = context + inputPosition;\n            outputOffset = context + outputPosition;\n            output[outputOffset + 0] = input[inputOffset + 0] * fi + this.midBuffer[context + 0] * tempFrame;\n            output[outputOffset + 1] = input[inputOffset + 1] * fi + this.midBuffer[context + 1] * tempFrame;\n        }\n    }\n\n    process() {\n        let offset;\n        let temp;\n        let overlapSkip;\n\n        if (this.midBuffer === null) {\n            // if midBuffer is empty, move the first samples of the input stream into it\n            if (this._inputBuffer.frameCount < this.overlapLength) {\n                // wait until we've got the overlapLength samples\n                return;\n            }\n            this.midBuffer = new Float32Array(this.overlapLength * 2);\n            this._inputBuffer.receiveSamples(this.midBuffer, this.overlapLength);\n        }\n\n        // Process samples as long as there are enough samples in 'inputBuffer' to form a processing frame\n        while (this._inputBuffer.frameCount >= this.sampleReq) {\n            // If tempo differs from the normal ('SCALE'), scan for hte best overlapping position\n            offset = this.seekBestOverlapPosition();\n\n            /**\n             * Mix the samples in the 'inputBuffer' at position of 'offset' with the samples in 'midBuffer'\n             * using sliding overlapping\n             * ... first partially overlap with the end of the previous sequence (that's in 'midBuffer')\n             */\n            this._outputBuffer.ensureAdditionalCapacity(this.overlapLength);\n            // FIXME unit?\n            // overlap(uint(offset));\n            this.overlap(Math.floor(offset));\n            this._outputBuffer.put(this.overlapLength);\n\n            // ... then copy sequence samples from 'inputBuffer' to output\n            temp = this.seekWindowLength - 2 * this.overlapLength; // & 0xfffffffe;\n            if (temp > 0) {\n                this._outputBuffer.putBuffer(this._inputBuffer, offset + this.overlapLength, temp);\n            }\n\n            /**\n             * Copies the end of the current sequence from 'inputBuffer' to 'midBuffer' for being mixed with\n             * the beginning of the next processing sequence and so on\n             */\n            // assert(offset + seekWindowLength <= (int)inputBuffer.numSamples());\n            const start = this._inputBuffer.startIndex + 2 * (offset + this.seekWindowLength - this.overlapLength);\n            this.midBuffer.set(this._inputBuffer.vector.subarray(start, start + 2 * this.overlapLength));\n\n            /**\n             * Remove the processed samples from the input buffer. Update the difference between\n             * integer & nominal skip step to 'skipFract' in order to prevent the error from\n             * accumulating over time\n             */\n            this.skipFract += this.nominalSkip; // real skip size\n            overlapSkip = Math.floor(this.skipFract);\n            this.skipFract -= overlapSkip;\n            this._inputBuffer.receive(overlapSkip);\n        }\n    }\n}","const testFloatEqual = function (a, b) {\n    return (a > b ? a - b : b - a) > 1e-10;\n};\n\nexport default testFloatEqual;","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport RateTransposer from './RateTransposer';\nimport Stretch from './Stretch';\nimport FifoSampleBuffer from './FifoSampleBuffer';\nimport testFloatEqual from './testFloatEqual';\n\nexport default class SoundTouch {\n    constructor() {\n        this.transposer = new RateTransposer(false);\n        this.stretch = new Stretch(false);\n\n        this._inputBuffer = new FifoSampleBuffer();\n        this._intermediateBuffer = new FifoSampleBuffer();\n        this._outputBuffer = new FifoSampleBuffer();\n\n        this._rate = 0;\n        this._tempo = 0;\n\n        this.virtualPitch = 1.0;\n        this.virtualRate = 1.0;\n        this.virtualTempo = 1.0;\n\n        this.calculateEffectiveRateAndTempo();\n    }\n\n    clear() {\n        this.transposer.clear();\n        this.stretch.clear();\n    }\n\n    clone() {\n        const result = new SoundTouch();\n        result.rate = this.rate;\n        result.tempo = this.tempo;\n        return result;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate) {\n        this.virtualRate = rate;\n        this.calculateEffectiveRateAndTempo();\n    }\n\n    set rateChange(rateChange) {\n        this._rate = 1.0 + 0.01 * rateChange;\n    }\n\n    get tempo() {\n        return this._tempo;\n    }\n\n    set tempo(tempo) {\n        this.virtualTempo = tempo;\n        this.calculateEffectiveRateAndTempo();\n    }\n\n    set tempoChange(tempoChange) {\n        this.tempo = 1.0 + 0.01 * tempoChange;\n    }\n\n    set pitch(pitch) {\n        this.virtualPitch = pitch;\n        this.calculateEffectiveRateAndTempo();\n    }\n\n    set pitchOctaves(pitchOctaves) {\n        this.pitch = Math.exp(0.69314718056 * pitchOctaves);\n        this.calculateEffectiveRateAndTempo();\n    }\n\n    set pitchSemitones(pitchSemitones) {\n        this.pitchOctaves = pitchSemitones / 12.0;\n    }\n\n    get inputBuffer() {\n        return this._inputBuffer;\n    }\n\n    get outputBuffer() {\n        return this._outputBuffer;\n    }\n\n    calculateEffectiveRateAndTempo() {\n        const previousTempo = this._tempo;\n        const previousRate = this._rate;\n\n        this._tempo = this.virtualTempo / this.virtualPitch;\n        this._rate = this.virtualRate * this.virtualPitch;\n\n        if (testFloatEqual(this._tempo, previousTempo)) {\n            this.stretch.tempo = this._tempo;\n        }\n        if (testFloatEqual(this._rate, previousRate)) {\n            this.transposer.rate = this._rate;\n        }\n\n        if (this._rate > 1.0) {\n            if (this._outputBuffer != this.transposer.outputBuffer) {\n                this.stretch.inputBuffer = this._inputBuffer;\n                this.stretch.outputBuffer = this._intermediateBuffer;\n\n                this.transposer.inputBuffer = this._intermediateBuffer;\n                this.transposer.outputBuffer = this._outputBuffer;\n            }\n        } else {\n            if (this._outputBuffer != this.stretch.outputBuffer) {\n                this.transposer.inputBuffer = this._inputBuffer;\n                this.transposer.outputBuffer = this._intermediateBuffer;\n\n                this.stretch.inputBuffer = this._intermediateBuffer;\n                this.stretch.outputBuffer = this._outputBuffer;\n            }\n        }\n    }\n\n    process() {\n        if (this._rate > 1.0) {\n            this.stretch.process();\n            this.transposer.process();\n        } else {\n            this.transposer.process();\n            this.stretch.process();\n        }\n    }\n}","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nexport default class WebAudioBufferSource {\n    constructor(buffer) {\n        this.buffer = buffer;\n        this._position = 0;\n    }\n\n    get dualChannel() {\n        return this.buffer.numberOfChannels > 1;\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    set position(value) {\n        this._position = value;\n    }\n\n    extract(target, numFrames = 0, position = 0) {\n        this.position = position;\n        let left = this.buffer.getChannelData(0);\n        let right = this.dualChannel ? this.buffer.getChannelData(1) : this.buffer.getChannelData(0);\n        let i = 0;\n        for (; i < numFrames; i++) {\n            target[i * 2] = left[i + position];\n            target[i * 2 + 1] = right[i + position];\n        }\n        return Math.min(numFrames, left.length - position);\n    }\n}","/**\n * getWebAudioNode\n *\n * A wrapper to create an AudioNode and apply a filter for frame extraction\n * Copyright (c) Adrian Holovary https://github.com/adrianholovaty\n *\n * @param context - AudioContext\n * @param filter - Object containing an 'extract()' method\n * @param bufferSize - units of sample frames (256, 512, 1024, 2048, 4096, 8192, 16384)\n * @returns {ScriptProcessorNode}\n */\nconst getWebAudioNode = function (context, filter, bufferSize) {\n    const BUFFER_SIZE = bufferSize || 4096;\n    const node = context.createScriptProcessor(BUFFER_SIZE, 2, 2);\n    const samples = new Float32Array(BUFFER_SIZE * 2);\n\n    node.onaudioprocess = (event) => {\n        let left = event.outputBuffer.getChannelData(0);\n        let right = event.outputBuffer.getChannelData(1);\n        let framesExtracted = filter.extract(samples, BUFFER_SIZE);\n        if (framesExtracted === 0) {\n            filter.onEnd();\n        }\n        let i = 0;\n        for (; i < framesExtracted; i++) {\n            left[i] = samples[i * 2];\n            right[i] = samples[i * 2 + 1];\n        }\n    };\n    return node;\n};\n\nexport default getWebAudioNode;","const pad = function(n, width, z) {\n    z = z || '0';\n    n = n + '';\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n};\n\nconst minsSecs = function (secs){\n    const mins = Math.floor(secs / 60);\n    const seconds = secs - mins * 60;\n    return `${mins}:${pad(parseInt(seconds),2)}`;\n};\n\nexport default minsSecs;","/*\n* SoundTouch JS audio processing library\n* Copyright (c) Olli Parviainen\n* Copyright (c) Ryan Berdeen\n* Copyright (c) Jakub Fiala\n* Copyright (c) Steve 'Cutter' Blades\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU Lesser General Public\n* License as published by the Free Software Foundation; either\n* version 2.1 of the License, or (at your option) any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public\n* License along with this library; if not, write to the Free Software\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\nimport WebAudioBufferSource from './WebAudioBufferSource';\nimport getWebAudioNode from './getWebAudioNode';\nimport SoundTouch from './SoundTouch';\nimport SimpleFilter from './SimpleFilter';\nimport minsSecs from './minsSecs';\nimport noop from './noop';\n\nexport default class PitchShifter {\n    constructor(context, buffer, bufferSize, onEnd = noop) {\n        this._soundtouch = new SoundTouch();\n        const source = new WebAudioBufferSource(buffer);\n        this._filter = new SimpleFilter(source, this._soundtouch, onEnd);\n        this._node = getWebAudioNode(context, this._filter);\n        this.tempo = 1;\n        this.rate = 1;\n        this.duration = () => buffer.duration;\n        this.sampleRate = () => context.sampleRate;\n    }\n\n    get formattedDuration() {\n        const dur = this.duration() || 0;\n        return minsSecs(dur);\n    }\n\n    get formattedTimePlayed() {\n        return minsSecs(this.timePlayed);\n    }\n\n    get timePlayed() {\n        return this._filter.sourcePosition / this.sampleRate();\n    }\n\n    get sourcePosition() {\n        return this._filter.sourcePosition;\n    }\n\n    get percentagePlayed() {\n        const dur = this.duration() || 0;\n        return (100 * this._filter.sourcePosition / (dur * this.sampleRate()));\n    }\n\n    set percentagePlayed(perc) {\n        const dur = this.duration() || 0;\n        this._filter.sourcePosition = parseInt(perc * dur * this.sampleRate());\n    }\n\n    get node() {\n        return this._node;\n    }\n\n    set pitch(pitch) {\n        this._soundtouch.pitch = pitch;\n    }\n\n    set pitchSemitones(semitone) {\n        this._soundtouch.pitchSemitones = semitone;\n    }\n\n    set rate(rate) {\n        this._soundtouch.rate = rate;\n    }\n\n    set tempo(tempo) {\n        this._soundtouch.tempo = tempo;\n    }\n\n    connect(toNode) {\n        this._node.connect(toNode);\n    }\n\n    disconnect() {\n        this._node.disconnect();\n    }\n}"],"names":["FifoSampleBuffer","_vector","Float32Array","_position","_frameCount","receive","rewind","numFrames","samples","position","sourceOffset","length","numSamples","ensureCapacity","destOffset","endIndex","vector","set","subarray","buffer","frameCount","putSamples","output","startIndex","minLength","parseInt","newVector","AbstractFifoSamplePipe","createBuffers","_inputBuffer","_outputBuffer","clear","inputBuffer","outputBuffer","RateTransposer","reset","_rate","slopeCount","prevSampleL","prevSampleR","result","rate","ensureAdditionalCapacity","numFramesOutput","transpose","put","src","srcOffset","dest","used","i","out","srcIndex","FilterSupport","pipe","_pipe","Error","numInputFrames","fillInputBuffer","process","noop","SimpleFilter","sourceSound","callback","historyBufferSize","_sourcePosition","outputBufferPosition","numFramesExtracted","extract","target","fillOutputBuffer","Math","min","currentFrames","max","event","data","RangeError","newOutputBufferPosition","sourcePosition","USE_AUTO_SEQUENCE_LEN","DEFAULT_SEQUENCE_MS","USE_AUTO_SEEKWINDOW_LEN","DEFAULT_SEEKWINDOW_MS","DEFAULT_OVERLAP_MS","_SCAN_OFFSETS","AUTOSEQ_TEMPO_LOW","AUTOSEQ_TEMPO_TOP","AUTOSEQ_AT_MIN","AUTOSEQ_AT_MAX","AUTOSEQ_K","AUTOSEQ_C","AUTOSEEK_AT_MIN","AUTOSEEK_AT_MAX","AUTOSEEK_K","AUTOSEEK_C","Stretch","_quickSeek","midBufferDirty","midBuffer","overlapLength","autoSeqSetting","autoSeekSetting","_tempo","setParameters","clearMidBuffer","sampleRate","sequenceMs","seekWindowMs","overlapMs","calculateSequenceParameters","calculateOverlapLength","tempo","overlapInMsec","newOvl","refMidBuffer","x","mi","ma","seq","seek","checkLimits","floor","seekWindowLength","seekLength","seekBestOverlapPositionStereoQuick","seekBestOverlapPositionStereo","bestOffset","bestCorrelation","correlation","preCalculateCorrelationReferenceStereo","Number","MIN_VALUE","calculateCrossCorrelationStereo","scanCount","correlationOffset","tempOffset","j","context","temp","mixingPosition","compare","mixing","calcLength","mixingOffset","overlapPosition","overlapStereo","inputPosition","input","outputPosition","tempFrame","frameScale","fi","inputOffset","outputOffset","offset","overlapSkip","receiveSamples","sampleReq","seekBestOverlapPosition","overlap","putBuffer","start","skipFract","nominalSkip","newTempo","intskip","enable","testFloatEqual","a","b","SoundTouch","transposer","stretch","_intermediateBuffer","virtualPitch","virtualRate","virtualTempo","calculateEffectiveRateAndTempo","previousTempo","previousRate","rateChange","tempoChange","pitch","pitchOctaves","exp","pitchSemitones","WebAudioBufferSource","left","getChannelData","right","dualChannel","numberOfChannels","value","getWebAudioNode","filter","bufferSize","BUFFER_SIZE","node","createScriptProcessor","onaudioprocess","framesExtracted","onEnd","pad","n","width","z","Array","join","minsSecs","secs","mins","seconds","PitchShifter","_soundtouch","source","_filter","_node","duration","toNode","connect","disconnect","dur","timePlayed","perc","semitone"],"mappings":"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"}